/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package cy.bishub.schematron.api.rest;

import cy.bishub.schematron.api.model.Attribute;
import cy.bishub.schematron.api.model.AttributeList;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-10-16T11:11:56.606013+02:00[Europe/Paris]")
@Validated
@Tag(name = "Attribute", description = "Attribute operations")
@RequestMapping("${openapi.Schematron - API - Server - Interface.base-path:}")
public interface AttributeApi {

    default AttributeApiDelegate getDelegate() {
        return new AttributeApiDelegate() {};
    }

    /**
     * PUT /attribute
     * Create Attribute
     *
     * @param attribute Attribute Request Body (required)
     * @return Attribute Response (status code 200)
     *         or Bad request. (status code 400)
     *         or Authorization information is missing or invalid. (status code 403)
     *         or Not found. (status code 404)
     *         or Unexpected Error (status code 500)
     *         or Not Implemented Response (status code 501)
     */
    @Operation(
        operationId = "createAttribute",
        tags = { "Attribute" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Attribute Response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Attribute.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad request.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "403", description = "Authorization information is missing or invalid.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "500", description = "Unexpected Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "501", description = "Not Implemented Response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/attribute",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Attribute> createAttribute(
        @Parameter(name = "Attribute", description = "Attribute Request Body", required = true) @Valid @RequestBody Attribute attribute
    ) {
        return getDelegate().createAttribute(attribute);
    }


    /**
     * DELETE /attribute/{AttributeId}
     * Delete Attribute
     *
     * @param attributeId Attribute Id (required)
     * @return Attribute Response (status code 200)
     *         or Bad request. (status code 400)
     *         or Authorization information is missing or invalid. (status code 403)
     *         or Not found. (status code 404)
     *         or Unexpected Error (status code 500)
     *         or Not Implemented Response (status code 501)
     */
    @Operation(
        operationId = "deleteAttribute",
        tags = { "Attribute" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Attribute Response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Attribute.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad request.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "403", description = "Authorization information is missing or invalid.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "500", description = "Unexpected Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "501", description = "Not Implemented Response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/attribute/{AttributeId}",
        produces = { "application/json" }
    )
    default ResponseEntity<Attribute> deleteAttribute(
        @NotNull @Parameter(name = "AttributeId", description = "Attribute Id", required = true) @Valid @RequestParam(value = "AttributeId", required = true) Long attributeId
    ) {
        return getDelegate().deleteAttribute(attributeId);
    }


    /**
     * GET /attribute/{AttributeId}
     * Get Attribute
     *
     * @param attributeId Attribute Id (required)
     * @return Attribute Response (status code 200)
     *         or Bad request. (status code 400)
     *         or Authorization information is missing or invalid. (status code 403)
     *         or Not found. (status code 404)
     *         or Unexpected Error (status code 500)
     *         or Not Implemented Response (status code 501)
     */
    @Operation(
        operationId = "getAttribute",
        tags = { "Attribute" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Attribute Response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Attribute.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad request.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "403", description = "Authorization information is missing or invalid.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "500", description = "Unexpected Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "501", description = "Not Implemented Response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/attribute/{AttributeId}",
        produces = { "application/json" }
    )
    default ResponseEntity<Attribute> getAttribute(
        @NotNull @Parameter(name = "AttributeId", description = "Attribute Id", required = true) @Valid @RequestParam(value = "AttributeId", required = true) Long attributeId
    ) {
        return getDelegate().getAttribute(attributeId);
    }


    /**
     * GET /attribute
     * Get Attribute List
     *
     * @param page Page (optional, default to 1)
     * @param pageSize Page Size (optional, default to 20)
     * @param sortBy Sort By parameter (optional)
     * @param sortOrder Sort Order parameter (optional)
     * @return Attribute List Response (status code 200)
     *         or Bad request. (status code 400)
     *         or Authorization information is missing or invalid. (status code 403)
     *         or Not found. (status code 404)
     *         or Unexpected Error (status code 500)
     *         or Not Implemented Response (status code 501)
     */
    @Operation(
        operationId = "getAttributeList",
        tags = { "Attribute" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Attribute List Response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AttributeList.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad request.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "403", description = "Authorization information is missing or invalid.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "500", description = "Unexpected Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "501", description = "Not Implemented Response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/attribute",
        produces = { "application/json" }
    )
    default ResponseEntity<AttributeList> getAttributeList(
        @Parameter(name = "Page", description = "Page") @Valid @RequestParam(value = "Page", required = false, defaultValue = "1") Long page,
        @Parameter(name = "PageSize", description = "Page Size") @Valid @RequestParam(value = "PageSize", required = false, defaultValue = "20") Long pageSize,
        @Parameter(name = "SortBy", description = "Sort By parameter") @Valid @RequestParam(value = "SortBy", required = false) List<String> sortBy,
        @Parameter(name = "SortOrder", description = "Sort Order parameter") @Valid @RequestParam(value = "SortOrder", required = false) List<String> sortOrder
    ) {
        return getDelegate().getAttributeList(page, pageSize, sortBy, sortOrder);
    }


    /**
     * PATCH /attribute/{AttributeId}
     * Update Attribute
     *
     * @param attributeId Attribute Id (required)
     * @param attribute Attribute Request Body (required)
     * @return Attribute Response (status code 200)
     *         or Bad request. (status code 400)
     *         or Authorization information is missing or invalid. (status code 403)
     *         or Not found. (status code 404)
     *         or Unexpected Error (status code 500)
     *         or Not Implemented Response (status code 501)
     */
    @Operation(
        operationId = "updateAttribute",
        tags = { "Attribute" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Attribute Response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Attribute.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad request.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "403", description = "Authorization information is missing or invalid.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "500", description = "Unexpected Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "501", description = "Not Implemented Response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/attribute/{AttributeId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Attribute> updateAttribute(
        @NotNull @Parameter(name = "AttributeId", description = "Attribute Id", required = true) @Valid @RequestParam(value = "AttributeId", required = true) Long attributeId,
        @Parameter(name = "Attribute", description = "Attribute Request Body", required = true) @Valid @RequestBody Attribute attribute
    ) {
        return getDelegate().updateAttribute(attributeId, attribute);
    }

}
